    在策略模式中可以定义一些独立的类来封装不同的算法，每一个类封装一个具体的算法，在这里每一个封装的算法都可以成为一种策略，
为了保证这些策略在使用时具有一致性，一般会提供一个抽象的策略类来做算法的声明，而每种算法对应于一个具体策略类。
    策略模式定义: 定义一系列算法，将每一个算法封装起来，并让它们可以互相替换。策略模式让算法可以独立于使用它的客户而变化。
    策略模式包含三个角色:
    Context(环境类): 环境类是使用算法的角色，它在解决某个问题(即实现某个功能)时可以采用多种策略。在环境类中维持一个对抽象策略类的引用实例，
用于定义所采用的策略。
    Strategy(抽象策略类): 抽象策略类为所支持的算法声明了抽象方法，是所有抽象策略类的父类，它可以是抽象类或具体类，也可以是接口。环境类通过
抽象策略类中声明的方法在运行时调用具体策略类中实现的算法。
    ConcreteStrategy(具体策略类): 具体策略类实现了在抽象类中声明的算法，在运行时具体策略类将覆盖在环境类中定义的抽象策略类对象，使用一种具体
的算法实现某个业务功能。
