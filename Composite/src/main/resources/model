组合模式: 组合多个对象形成树形结构以表示具有部分-整体关系的层次结构。组合模式让客户端可以统一对待单个对象
和组合对象。

Component(抽象构件): 它可以是接口或抽象类，为叶子构件对象声明接口，在该角色中可以包含所有子类共有行为
的声明和实现。在抽象构件中定义了访问及管理它的子构件的方法，如增加叶子构件、删除子构件、获取子构件等。

Leaf(叶子构件): 它在组合构件中表示叶子结点对象，叶子结点没有子结点，它实现了在抽象构件中定义的行为。对于那些访问
及管理子构件的方法，可以通过抛出异常、提示错误等方式进行处理。

Composite(容器构件): 它在组合结构中表示容器结点对象，容器结点包含子结点，其子结点可以是叶子结点，也可以是容器
结点，它提供一个集合用于存储子结点，实现了在抽象构件中定义的行为，包括那些访问及管理子构件的方法，在其业务方法中
可以递归调用其子结点的业务方法。

透明组合模式: 抽象构件Component中声明了所有用于管理成员对象的方法，包括add()、remove()以及getChild()等方法，
这样做的好处是确保所有的构件类都具有相同的接口。在客户端看来，叶子对象与容器对象所提供的方法是一致的，客户端可以一致
地对待所有的对象。

安全组合模式: 在安全组合模式中，抽象构件没有声明任何用于管理成员对象的方法，而是在Composite类中声明并实现这些方法。
这种做法是安全的，因为根本不向叶子对象提供这些管理成员对象的方法，对于叶子结点，客户端不可能调用到这些方法。安全组合模式
的缺点是不够透明，因为叶子构件和容器构件具有不同的方法，且容器构件中那些用于管理成员对象的方法没有在抽象构件类中定义，
因此客户端不能完全针对抽象编程，必须有区别地对待叶子构件和容器构件。